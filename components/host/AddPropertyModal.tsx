'use client';

import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Property } from '@/types';
import styles from './AddPropertyModal.module.css';

interface AddPropertyModalProps {
  onClose: () => void;
  onPropertyAdded: (property: Property) => void;
}

const AddPropertyModal: React.FC<AddPropertyModalProps> = ({ onClose, onPropertyAdded }) => {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [formData, setFormData] = useState({
    name: '',
    location: '',
    baseRate: '',
    description: '',
    imageUrl: '',
    amenities: '',
    roomTypes: ''
  });

  const handleInputChange = (field: string, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }));
    if (error) setError(null);
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError(null);

    try {
      // Validate required fields
      if (!formData.name || !formData.location || !formData.baseRate) {
        setError('Please fill in all required fields');
        setLoading(false);
        return;
      }

      // Create new property object
      const newProperty: Property = {
        id: Date.now(), // In a real app, this would be generated by the backend
        name: formData.name,
        location: formData.location,
        baseRate: parseInt(formData.baseRate),
        description: formData.description,
        imageUrl: formData.imageUrl || 'https://images.unsplash.com/photo-1566073771259-6a8506099945?auto=format&fit=crop&w=500&q=80',
        isBulkBookingEnabled: false,
        amenities: formData.amenities ? formData.amenities.split(',').map(a => a.trim()) : [],
        roomTypes: formData.roomTypes ? formData.roomTypes.split(',').map(r => r.trim()) : [],
        totalBookings: 0,
        occupancyRate: 0
      };

      // In a real app, you would make an API call here
      await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate API call

      onPropertyAdded(newProperty);
    } catch {
      setError('Failed to add property. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className={styles.overlay}>
      <div className={styles.modal}>
        <div className={styles.header}>
          <h2 className={styles.title}>Add New Property</h2>
          <button onClick={onClose} className={styles.closeButton}>×</button>
        </div>

        <form onSubmit={handleSubmit} className={styles.form}>
          <div className={styles.row}>
            <div className={styles.field}>
              <Label htmlFor="name">Property Name *</Label>
              <Input
                id="name"
                type="text"
                value={formData.name}
                onChange={(e) => handleInputChange('name', e.target.value)}
                placeholder="e.g., Luxury Beach Resort"
                required
              />
            </div>

            <div className={styles.field}>
              <Label htmlFor="location">Location *</Label>
              <Input
                id="location"
                type="text"
                value={formData.location}
                onChange={(e) => handleInputChange('location', e.target.value)}
                placeholder="e.g., Goa, India"
                required
              />
            </div>
          </div>

          <div className={styles.row}>
            <div className={styles.field}>
              <Label htmlFor="baseRate">Base Rate per Night (₹) *</Label>
              <Input
                id="baseRate"
                type="number"
                value={formData.baseRate}
                onChange={(e) => handleInputChange('baseRate', e.target.value)}
                placeholder="e.g., 5000"
                required
              />
            </div>

            <div className={styles.field}>
              <Label htmlFor="imageUrl">Image URL</Label>
              <Input
                id="imageUrl"
                type="url"
                value={formData.imageUrl}
                onChange={(e) => handleInputChange('imageUrl', e.target.value)}
                placeholder="https://example.com/image.jpg"
              />
            </div>
          </div>

          <div className={styles.field}>
            <Label htmlFor="description">Description</Label>
            <textarea
              id="description"
              value={formData.description}
              onChange={(e) => handleInputChange('description', e.target.value)}
              placeholder="Describe your property..."
              className={styles.textarea}
              rows={3}
            />
          </div>

          <div className={styles.row}>
            <div className={styles.field}>
              <Label htmlFor="amenities">Amenities (comma-separated)</Label>
              <Input
                id="amenities"
                type="text"
                value={formData.amenities}
                onChange={(e) => handleInputChange('amenities', e.target.value)}
                placeholder="WiFi, AC, Pool, Gym"
              />
            </div>

            <div className={styles.field}>
              <Label htmlFor="roomTypes">Room Types (comma-separated)</Label>
              <Input
                id="roomTypes"
                type="text"
                value={formData.roomTypes}
                onChange={(e) => handleInputChange('roomTypes', e.target.value)}
                placeholder="Deluxe, Suite, Standard"
              />
            </div>
          </div>

          {error && (
            <div className={styles.error}>
              {error}
            </div>
          )}

          <div className={styles.actions}>
            <Button type="button" variant="outline" onClick={onClose}>
              Cancel
            </Button>
            <Button type="submit" disabled={loading}>
              {loading ? 'Adding Property...' : 'Add Property'}
            </Button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default AddPropertyModal;